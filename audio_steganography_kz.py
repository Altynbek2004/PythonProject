import numpy as np
import matplotlib.pyplot as plt
from scipy.io import wavfile
from scipy import signal
from scipy.fft import fft, fftfreq
import wave
import struct
import os


class AudioSteganographyDetector:
    """
    Audio —Ñ–∞–π–ª–¥–∞—Ä—ã–Ω–¥–∞“ì—ã –∂–∞—Å—ã—Ä—ã–Ω –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –∞–Ω—ã“õ—Ç–∞—É –∂”ô–Ω–µ —Ç–∞–ª–¥–∞—É –∂“Ø–π–µ—Å—ñ
    """

    def __init__(self, audio_file):
        self.audio_file = audio_file
        self.sample_rate = None
        self.audio_data = None
        self.duration = None

    def load_audio(self):
        """Audio —Ñ–∞–π–ª–¥—ã –∂“Ø–∫—Ç–µ—É"""
        try:
            self.sample_rate, self.audio_data = wavfile.read(self.audio_file)

            # Stereo –±–æ–ª—Å–∞, mono-“ì–∞ –∞–π–Ω–∞–ª–¥—ã—Ä—É
            if len(self.audio_data.shape) > 1:
                self.audio_data = self.audio_data[:, 0]

            self.duration = len(self.audio_data) / self.sample_rate
            print(f"‚úì –§–∞–π–ª –∂“Ø–∫—Ç–µ–ª–¥—ñ: {self.audio_file}")
            print(f"  Sample Rate: {self.sample_rate} Hz")
            print(f"  “∞–∑–∞“õ—Ç—ã“ì—ã: {self.duration:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"  “Æ–ª–≥—ñ–ª–µ—Ä —Å–∞–Ω—ã: {len(self.audio_data)}")
            return True
        except Exception as e:
            print(f"‚úó “ö–∞—Ç–µ: {e}")
            return False

    def lsb_analysis(self):
        """LSB (Least Significant Bit) —Ç–∞–ª–¥–∞—É—ã"""
        print("\n=== LSB –¢–∞–ª–¥–∞—É—ã ===")

        # LSB –±–∏—Ç—ñ–Ω –∞–ª—É
        lsb_data = self.audio_data & 1

        # LSB —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Å—ã
        zeros = np.sum(lsb_data == 0)
        ones = np.sum(lsb_data == 1)
        total = len(lsb_data)

        zero_ratio = zeros / total
        one_ratio = ones / total

        print(f"0-–ª–µ—Ä —Å–∞–Ω—ã: {zeros} ({zero_ratio * 100:.2f}%)")
        print(f"1-–ª–µ—Ä —Å–∞–Ω—ã: {ones} ({one_ratio * 100:.2f}%)")

        # Chi-square —Ç–µ—Å—Ç—ñ
        expected = total / 2
        chi_square = ((zeros - expected) ** 2 + (ones - expected) ** 2) / expected

        print(f"Chi-square –º”ô–Ω—ñ: {chi_square:.4f}")

        # –ö“Ø–¥—ñ–∫—Ç—ñ –¥–µ–ø —Å–∞–Ω–∞–ª—É —à–µ–≥—ñ
        if abs(zero_ratio - 0.5) > 0.05:
            print("‚ö† –ö“Æ–î–Ü–ö–¢–Ü: LSB —Ç–∞—Ä–∞–ª—É—ã “õ–∞–ª—ã–ø—Ç—ã –µ–º–µ—Å!")
            suspicion_level = "–ñ–û“í–ê–†–´"
        elif chi_square > 10:
            print("‚ö† –ï–°–ö–ï–†–¢–£: Chi-square –º”ô–Ω—ñ –∂–æ“ì–∞—Ä—ã")
            suspicion_level = "–û–†–¢–ê–®–ê"
        else:
            print("‚úì LSB —Ç–∞—Ä–∞–ª—É—ã “õ–∞–ª—ã–ø—Ç—ã")
            suspicion_level = "–¢”®–ú–ï–ù"

        return {
            'zero_ratio': zero_ratio,
            'one_ratio': one_ratio,
            'chi_square': chi_square,
            'suspicion_level': suspicion_level
        }

    def spectral_analysis(self):
        """–°–ø–µ–∫—Ç—Ä–∞–ª–¥—ã —Ç–∞–ª–¥–∞—É"""
        print("\n=== –°–ø–µ–∫—Ç—Ä–∞–ª–¥—ã –¢–∞–ª–¥–∞—É ===")

        # FFT –µ—Å–µ–ø—Ç–µ—É
        fft_data = fft(self.audio_data)
        freqs = fftfreq(len(self.audio_data), 1 / self.sample_rate)

        # –¢–µ–∫ –æ“£ –∂–∏—ñ–ª—ñ–∫—Ç–µ—Ä
        positive_freqs = freqs[:len(freqs) // 2]
        magnitude = np.abs(fft_data[:len(fft_data) // 2])

        # –ñ–æ“ì–∞—Ä—ã –∂–∏—ñ–ª—ñ–∫—Ç–µ—Ä–¥–µ–≥—ñ –∞–Ω–æ–º–∞–ª–∏—è–ª–∞—Ä–¥—ã —ñ–∑–¥–µ—É
        high_freq_threshold = self.sample_rate / 4
        high_freq_mask = positive_freqs > high_freq_threshold
        high_freq_energy = np.sum(magnitude[high_freq_mask] ** 2)
        total_energy = np.sum(magnitude ** 2)

        high_freq_ratio = high_freq_energy / total_energy

        print(f"–ñ–æ“ì–∞—Ä—ã –∂–∏—ñ–ª—ñ–∫ —ç–Ω–µ—Ä–≥–∏—è—Å—ã: {high_freq_ratio * 100:.2f}%")

        if high_freq_ratio > 0.15:
            print("‚ö† –ö“Æ–î–Ü–ö–¢–Ü: –ñ–æ“ì–∞—Ä—ã –∂–∏—ñ–ª—ñ–∫—Ç–µ—Ä–¥–µ –∞–Ω–æ–º–∞–ª–∏—è –±–∞—Ä!")
            suspicion = True
        else:
            print("‚úì –°–ø–µ–∫—Ç—Ä “õ–∞–ª—ã–ø—Ç—ã")
            suspicion = False

        return {
            'high_freq_ratio': high_freq_ratio,
            'suspicion': suspicion,
            'freqs': positive_freqs,
            'magnitude': magnitude
        }

    def statistical_analysis(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–ª—ã“õ —Ç–∞–ª–¥–∞—É"""
        print("\n=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–ª—ã“õ –¢–∞–ª–¥–∞—É ===")

        # –ù–µ–≥—ñ–∑–≥—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        mean = np.mean(self.audio_data)
        std = np.std(self.audio_data)
        variance = np.var(self.audio_data)

        print(f"–û—Ä—Ç–∞—à–∞ –º”ô–Ω: {mean:.2f}")
        print(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç—Ç—ã –∞—É—ã—Ç“õ—É: {std:.2f}")
        print(f"–î–∏—Å–ø–µ—Ä—Å–∏—è: {variance:.2f}")

        # –≠–Ω—Ç—Ä–æ–ø–∏—è –µ—Å–µ–ø—Ç–µ—É
        hist, _ = np.histogram(self.audio_data, bins=256)
        hist = hist / len(self.audio_data)
        hist = hist[hist > 0]
        entropy = -np.sum(hist * np.log2(hist))

        print(f"–≠–Ω—Ç—Ä–æ–ø–∏—è: {entropy:.4f} –±–∏—Ç")

        # “ö–∞–ª—ã–ø—Ç—ã audio “Ø—à—ñ–Ω —ç–Ω—Ç—Ä–æ–ø–∏—è 7-8 –∞—Ä–∞–ª—ã“ì—ã–Ω–¥–∞
        if entropy > 7.5:
            print("‚ö† –ï–°–ö–ï–†–¢–£: –ñ–æ“ì–∞—Ä—ã —ç–Ω—Ç—Ä–æ–ø–∏—è - –∂–∞—Å—ã—Ä—ã–Ω –¥–µ—Ä–µ–∫—Ç–µ—Ä –±–æ–ª—É—ã –º“Ø–º–∫—ñ–Ω")
            suspicion = True
        else:
            print("‚úì –≠–Ω—Ç—Ä–æ–ø–∏—è “õ–∞–ª—ã–ø—Ç—ã –¥–µ“£–≥–µ–π–¥–µ")
            suspicion = False

        return {
            'mean': mean,
            'std': std,
            'entropy': entropy,
            'suspicion': suspicion
        }

    def generate_report(self, lsb_result, spectral_result, stat_result):
        """–¢–æ–ª—ã“õ –µ—Å–µ–ø—Ç—ñ –∂–∞—Å–∞—É"""
        print("\n" + "=" * 60)
        print("–°–¢–ï–ì–ê–ù–û–ì–†–ê–§–ò–Ø –ê–ù–´“ö–¢–ê–£ –ï–°–ï–ë–Ü")
        print("=" * 60)
        print(f"–§–∞–π–ª: {self.audio_file}")
        print(f"–î–∞—Ç–∞: {np.datetime64('today')}")
        print("\n--- –ù”ò–¢–ò–ñ–ï–õ–ï–† ---")
        print(f"1. LSB –¢–∞–ª–¥–∞—É—ã: –ö“Ø–¥—ñ–∫ –¥–µ“£–≥–µ–π—ñ - {lsb_result['suspicion_level']}")
        print(f"2. –°–ø–µ–∫—Ç—Ä–∞–ª–¥—ã –¢–∞–ª–¥–∞—É: {'–ö“Æ–î–Ü–ö–¢–Ü' if spectral_result['suspicion'] else '–¢–ê–ó–ê'}")
        print(f"3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–ª—ã“õ –¢–∞–ª–¥–∞—É: {'–ö“Æ–î–Ü–ö–¢–Ü' if stat_result['suspicion'] else '–¢–ê–ó–ê'}")

        # –ñ–∞–ª–ø—ã “õ–æ—Ä—ã—Ç—ã–Ω–¥—ã
        suspicion_count = sum([
            lsb_result['suspicion_level'] == '–ñ–û“í–ê–†–´',
            spectral_result['suspicion'],
            stat_result['suspicion']
        ])

        print("\n--- “ö–û–†–´–¢–´–ù–î–´ ---")
        if suspicion_count >= 2:
            print("üî¥ –ñ–û“í–ê–†–´ –´“ö–¢–ò–ú–ê–õ–î–´“ö: –§–∞–π–ª–¥–∞ —Å—Ç–µ–≥–∞–Ω–æ–≥—Ä–∞—Ñ–∏—è –±–∞—Ä!")
        elif suspicion_count == 1:
            print("üü° –û–†–¢–ê–®–ê –´“ö–¢–ò–ú–ê–õ–î–´“ö: “ö–æ—Å—ã–º—à–∞ —Ç–µ–∫—Å–µ—Ä—É “õ–∞–∂–µ—Ç")
        else:
            print("üü¢ –¢”®–ú–ï–ù –´“ö–¢–ò–ú–ê–õ–î–´“ö: –§–∞–π–ª —Ç–∞–∑–∞ –±–æ–ª—ã–ø –∫”©—Ä—ñ–Ω–µ–¥—ñ")

        print("=" * 60)

    def visualize_results(self, spectral_result):
        """–ù”ô—Ç–∏–∂–µ–ª–µ—Ä–¥—ñ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–ª–∞—É"""
        fig, axes = plt.subplots(3, 1, figsize=(12, 10))

        # 1. –¢–æ–ª“õ—ã–Ω —Ñ–æ—Ä–º–∞—Å—ã
        time = np.linspace(0, self.duration, len(self.audio_data))
        axes[0].plot(time[:1000], self.audio_data[:1000], color='blue', linewidth=0.5)
        axes[0].set_title('Audio –¢–æ–ª“õ—ã–Ω –§–æ—Ä–º–∞—Å—ã (–∞–ª“ì–∞—à“õ—ã 1000 “Ø–ª–≥—ñ)', fontsize=12, fontweight='bold')
        axes[0].set_xlabel('–£–∞“õ—ã—Ç (—Å)')
        axes[0].set_ylabel('–ê–º–ø–ª–∏—Ç—É–¥–∞')
        axes[0].grid(True, alpha=0.3)

        # 2. LSB —Ç–∞—Ä–∞–ª—É—ã
        lsb_data = self.audio_data & 1
        axes[1].hist(lsb_data, bins=2, color='green', alpha=0.7, edgecolor='black')
        axes[1].set_title('LSB –ë–∏—Ç—ñ–Ω—ñ“£ –¢–∞—Ä–∞–ª—É—ã', fontsize=12, fontweight='bold')
        axes[1].set_xlabel('–ë–∏—Ç –º”ô–Ω—ñ')
        axes[1].set_ylabel('–ñ–∏—ñ–ª—ñ–∫')
        axes[1].set_xticks([0, 1])
        axes[1].grid(True, alpha=0.3)

        # 3. –°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞
        freqs = spectral_result['freqs']
        magnitude = spectral_result['magnitude']
        axes[2].semilogy(freqs[:len(freqs) // 10], magnitude[:len(magnitude) // 10], color='red', linewidth=0.8)
        axes[2].set_title('–ñ–∏—ñ–ª—ñ–∫ –°–ø–µ–∫—Ç—Ä—ñ', fontsize=12, fontweight='bold')
        axes[2].set_xlabel('–ñ–∏—ñ–ª—ñ–∫ (Hz)')
        axes[2].set_ylabel('–ú–∞–≥–Ω–∏—Ç—É–¥–∞ (log scale)')
        axes[2].grid(True, alpha=0.3)

        plt.tight_layout()
        plt.savefig('steganography_analysis.png', dpi=300, bbox_inches='tight')
        print("\n‚úì –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–∞“õ—Ç–∞–ª–¥—ã: steganography_analysis.png")
        plt.show()


# LSB Steganography –∂–∞—Å–∞—É (—Ç–µ—Å—Ç—ñ–ª–µ—É “Ø—à—ñ–Ω)
class LSBSteganography:
    """LSB ”ô–¥—ñ—Å—ñ–º–µ–Ω audio —Ñ–∞–π–ª“ì–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂–∞—Å—ã—Ä—É"""

    @staticmethod
    def hide_message(audio_file, message, output_file):
        """–•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã audio —Ñ–∞–π–ª“ì–∞ –∂–∞—Å—ã—Ä—É"""
        print(f"\n=== –•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂–∞—Å—ã—Ä—É ===")

        # Audio –∂“Ø–∫—Ç–µ—É
        sample_rate, audio_data = wavfile.read(audio_file)

        if len(audio_data.shape) > 1:
            audio_data = audio_data[:, 0]

        # –•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã binary-“ì–∞ –∞–π–Ω–∞–ª–¥—ã—Ä—É
        binary_message = ''.join(format(ord(c), '08b') for c in message)
        binary_message += '1111111111111110'  # –ê—è“õ—Ç–∞—É –±–µ–ª–≥—ñ—Å—ñ

        if len(binary_message) > len(audio_data):
            print("‚úó “ö–∞—Ç–µ: –•–∞–±–∞—Ä–ª–∞–º–∞ —Ç—ã–º “±–∑—ã–Ω!")
            return False

        # LSB-“ì–∞ –∂–∞–∑—É
        stego_audio = audio_data.copy()
        for i, bit in enumerate(binary_message):
            stego_audio[i] = (stego_audio[i] & ~1) | int(bit)

        # –°–∞“õ—Ç–∞—É
        wavfile.write(output_file, sample_rate, stego_audio.astype(audio_data.dtype))
        print(f"‚úì –•–∞–±–∞—Ä–ª–∞–º–∞ –∂–∞—Å—ã—Ä—ã–ª–¥—ã: {output_file}")
        print(f"  –•–∞–±–∞—Ä–ª–∞–º–∞: '{message}'")
        print(f"  “∞–∑—ã–Ω–¥—ã“ì—ã: {len(message)} —Å–∏–º–≤–æ–ª")
        return True

    @staticmethod
    def extract_message(audio_file):
        """–ñ–∞—Å—ã—Ä—ã–ª“ì–∞–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∞–ª—É"""
        print(f"\n=== –•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∞–ª—É ===")

        sample_rate, audio_data = wavfile.read(audio_file)

        if len(audio_data.shape) > 1:
            audio_data = audio_data[:, 0]

        # LSB –±–∏—Ç—ñ–Ω –∞–ª—É
        binary_message = ''
        for sample in audio_data:
            binary_message += str(sample & 1)

        # –ê—è“õ—Ç–∞—É –±–µ–ª–≥—ñ—Å—ñ–Ω —ñ–∑–¥–µ—É
        terminator = '1111111111111110'
        end_index = binary_message.find(terminator)

        if end_index == -1:
            print("‚úó –•–∞–±–∞—Ä–ª–∞–º–∞ —Ç–∞–±—ã–ª–º–∞–¥—ã")
            return None

        binary_message = binary_message[:end_index]

        # Binary-–¥–∞–Ω text-–∫–µ –∞–π–Ω–∞–ª–¥—ã—Ä—É
        message = ''
        for i in range(0, len(binary_message), 8):
            byte = binary_message[i:i + 8]
            if len(byte) == 8:
                message += chr(int(byte, 2))

        print(f"‚úì –•–∞–±–∞—Ä–ª–∞–º–∞ —Ç–∞–±—ã–ª–¥—ã: '{message}'")
        return message


# –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø
def demo():
    """–¢–æ–ª—ã“õ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è"""
    print("=" * 60)
    print("AUDIO STEGANOGRAPHY DETECTION AND ANALYSIS")
    print("Digital Forensics –ü—Ä–æ–µ–∫—Ç—ñ")
    print("=" * 60)

    # 1. –¢–∞–∑–∞ audio —Ñ–∞–π–ª –∂–∞—Å–∞—É (—Ç–µ—Å—Ç—ñ–ª–µ—É “Ø—à—ñ–Ω)
    print("\n[1] –¢–µ—Å—Ç—ñ–ª—ñ–∫ audio —Ñ–∞–π–ª –∂–∞—Å–∞—É...")
    duration = 2
    sample_rate = 44100
    frequency = 440  # A4 –Ω–æ—Ç–∞–ª—ã“õ —Ç–æ–Ω
    t = np.linspace(0, duration, int(sample_rate * duration))
    clean_audio = np.sin(2 * np.pi * frequency * t) * 32767
    clean_audio = clean_audio.astype(np.int16)

    clean_file = 'clean_audio.wav'
    wavfile.write(clean_file, sample_rate, clean_audio)
    print(f"‚úì –¢–∞–∑–∞ —Ñ–∞–π–ª –∂–∞—Å–∞–ª–¥—ã: {clean_file}")

    # 2. –•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂–∞—Å—ã—Ä—É
    print("\n[2] –•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂–∞—Å—ã—Ä—É...")
    stego_file = 'stego_audio.wav'
    message = "–ë“±–ª –∂–∞—Å—ã—Ä—ã–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞!"
    LSBSteganography.hide_message(clean_file, message, stego_file)

    # 3. –¢–∞–∑–∞ —Ñ–∞–π–ª–¥—ã —Ç–∞–ª–¥–∞—É
    print("\n" + "=" * 60)
    print("[3] –¢–ê–ó–ê –§–ê–ô–õ–î–´ –¢–ê–õ–î–ê–£")
    print("=" * 60)
    detector_clean = AudioSteganographyDetector(clean_file)
    detector_clean.load_audio()

    lsb_clean = detector_clean.lsb_analysis()
    spectral_clean = detector_clean.spectral_analysis()
    stat_clean = detector_clean.statistical_analysis()
    detector_clean.generate_report(lsb_clean, spectral_clean, stat_clean)

    # 4. –°—Ç–µ–≥–æ —Ñ–∞–π–ª–¥—ã —Ç–∞–ª–¥–∞—É
    print("\n" + "=" * 60)
    print("[4] –°–¢–ï–ì–û –§–ê–ô–õ–î–´ –¢–ê–õ–î–ê–£")
    print("=" * 60)
    detector_stego = AudioSteganographyDetector(stego_file)
    detector_stego.load_audio()

    lsb_stego = detector_stego.lsb_analysis()
    spectral_stego = detector_stego.spectral_analysis()
    stat_stego = detector_stego.statistical_analysis()
    detector_stego.generate_report(lsb_stego, spectral_stego, stat_stego)

    # 5. –•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∞–ª—É
    print("\n[5] –ñ–∞—Å—ã—Ä—ã–ª“ì–∞–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∞–ª—É...")
    extracted = LSBSteganography.extract_message(stego_file)

    # 6. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    print("\n[6] –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∂–∞—Å–∞—É...")
    detector_stego.visualize_results(spectral_stego)

    print("\n" + "=" * 60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–Ø“ö–¢–ê–õ–î–´")
    print("=" * 60)


if __name__ == "__main__":
    demo()